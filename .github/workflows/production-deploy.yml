name: Prod deploy
on:
    push:
        branches:
            - main

jobs:
    messenger-demo-deploy:
        environment: prod
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v3
              with:
                  registry-url: 'https://npm.pkg.github.com'
                  node-version: 18.0.0
                  cache: 'yarn'
            - name: Declare some variables
              shell: bash
              run: |
                  echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
                  echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_ENV"
                  echo "now=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
            - name: Prepare SSH
              run: |
                  mkdir ~/.ssh
                  echo "${{ secrets.HOST_SSH_PUBLIC_KEY }}" > ~/.ssh/known_hosts
                  echo "${{ secrets.DO_SSH_KEY }}" > ./ssh-key
                  chmod 600 ./ssh-key
            - name: Create .env file
              env:
                  TARGET_HOST: ${{ secrets.HOST_DOMAIN}}
                  TARGET_IP: ${{ secrets.IP_ADDRESS }}
              run: |
                  echo "REACT_APP_ADDR_ENS_SUBDOMAIN=.addr.dm3.eth" >> ./.env.react
                  echo "REACT_APP_BACKEND=https://${{ secrets.HOST_DOMAIN}}/api" >> ./.env.react
                  echo "REACT_APP_DEFAULT_DELIVERY_SERVICE=ds.dm3.eth" >> ./.env.react
                  echo "REACT_APP_DEFAULT_SERVICE=https://${{ secrets.HOST_DOMAIN}}/api" >> ./.env.react
                  echo "REACT_APP_MAINNET_PROVIDER_RPC=${{ secrets.RPC }}" >> ./.env.react
                  echo "REACT_APP_PROFILE_BASE_URL=https://${{ secrets.HOST_DOMAIN}}/api" >> ./.env.react
                  echo "REACT_APP_RESOLVER_BACKEND=https://${{ secrets.HOST_DOMAIN}}/resolver-handler" >> ./.env.react
                  echo "REACT_APP_USER_ENS_SUBDOMAIN=.user.dm3.eth" >> ./.env.react
                  echo "REACT_APP_WALLET_CONNECT_PROJECT_ID=${{ secrets.REACT_APP_WALLET_CONNECT_PROJECT_ID }}" >> ./.env.react
                  echo "REACT_APP_MAINNET_PROVIDER_RPC=${{ secrets.MAINNET_PROVIDER_URL}}" >> ./.env.react
                  echo "REACT_APP_CHAIN_ID=${{ vars.CHAIN_ID }}" >> ./.env.react
                  cat ./.env.react >> ./.env
                  echo "RESOLVER_ADDR=0xae6646c22D8eE6479eE0a39Bf63B9bD9e57bAD9d" >> ./.env
                  echo "SIGNING_PUBLIC_KEY=${{ secrets.SIGNING_PUBLIC_KEY }}" >> ./.env
                  echo "SIGNING_PRIVATE_KEY=${{ secrets.SIGNING_PRIVATE_KEY }}" >> ./.env
                  echo "SIGNER_PRIVATE_KEY=${{ secrets.SIGNER_PRIVATE_KEY }}" >> ./.env
                  echo "SPAM_PROTECTION=${{ secrets.SPAM_PROTECTION }}" >> ./.env
                  echo "ENCRYPTION_PUBLIC_KEY=${{ secrets.ENCRYPTION_PUBLIC_KEY }}" >> ./.env
                  echo "ENCRYPTION_PRIVATE_KEY=${{ secrets.ENCRYPTION_PRIVATE_KEY }}" >> ./.env
                  echo "RPC=${{ secrets.RPC }}" >> ./.env
                  echo "URL=${{ secrets.HOST_DOMAIN}}" >> ./.env
                  echo "CERT_MAIL=${{ secrets.CERT_MAIL }}" >> ./.env
                  echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> ./.env
                  envsubst '${TARGET_HOST}' < ./docker/prod/nginx.conf > ./nginx.conf
                  cat ./.env
            - name: Build unified docker image
              shell: bash
              run: |
                  cp ./.env.react packages/messenger-demo/.env
                  cp ./.env.react packages/messenger-web/.env
                  docker build --progress=plain -t dm3-backend:latest -f ./docker/Dockerfile .
                  docker save -o ./dm3-backend.tar dm3-backend:latest
            - name: Build repository
              shell: bash
              run: |
                  yarn install
                  # build all workspaces
                  yarn build
            - name: Export libraries
              working-directory: 'packages/lib'
              shell: bash
              # pack libraries into archives. they are copied to and used in the delivery service image.
              # we ignore the billboard-api library because it is not properly connected to our monorepo
              run: for lib in `ls -I billboard-api`; do cd $lib; yarn pack --filename ../$lib.tgz; cd ..;  done
            - name: Create docker image for delivery service
              shell: bash
              run: |
                  docker build --progress=plain -t dm3-delivery-service:latest -f ./docker/DockerfileDeliveryService .
                  docker save -o ./dm3-delivery-service.tar dm3-delivery-service:latest
            - name: Prepare docker
              run: |
                  ssh -i ./ssh-key app@${{ secrets.IP_ADDRESS}} "\
                  cd dm3 && docker compose down && docker system prune -af"
                  ssh -i ./ssh-key root@${{ secrets.IP_ADDRESS}} "\
                  systemctl restart docker.service \
                  rm /home/app/*.tar || true"
            - name: Sync files
              run: |
                  rsync -avz -e 'ssh -i ./ssh-key' ./.env app@${{ secrets.IP_ADDRESS}}:/home/app/dm3
                  rsync -avz -e 'ssh -i ./ssh-key' ./dm3-backend.tar app@${{ secrets.IP_ADDRESS}}:/home/app/dm3 
                  rsync -avz -e 'ssh -i ./ssh-key' ./dm3-delivery-service.tar app@${{ secrets.IP_ADDRESS}}:/home/app/dm3
                  rsync -avz -e 'ssh -i ./ssh-key' ./nginx.conf app@${{ secrets.IP_ADDRESS}}:/home/app/dm3
                  rsync -avz -e 'ssh -i ./ssh-key' ./docker/prod/docker-compose.yml app@${{ secrets.IP_ADDRESS}}:/home/app/dm3
            - name: Load docker images
              run: |
                  ssh -i ./ssh-key app@${{ secrets.IP_ADDRESS}} "\
                  cd dm3 && ls |grep -E 'dm3-.*tar' | xargs --no-run-if-empty -L 1 docker load -i; \
                  rm dm3-*.tar || true"
            - name: Firewall config
              run: |
                  ssh -i ./ssh-key root@${{ secrets.IP_ADDRESS}} "\
                  ufw allow from 172.18.0.1/16 proto tcp to ${{ secrets.IP_ADDRESS }} port 80"
            - name: Start
              run: |
                  ssh -i ./ssh-key app@${{ secrets.IP_ADDRESS}} "\
                  cd dm3 && docker compose --env-file .env up -d"
