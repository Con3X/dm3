FROM --platform=linux/amd64 node:22-alpine as build
WORKDIR /build
COPY . .
# we need coreutils for proper ls command
RUN apk add --update coreutils python3 make g++ curl bash gawk jq\
   && rm -rf /var/cache/apk/*
# RUN yarn install
# RUN yarn build

## Export libraries into archives
WORKDIR '/build/packages/lib'
# pack libraries into archives. they are copied to and used in the delivery service image.
# we ignore the billboard-api library because it is not properly connected to our monorepo
RUN mkdir /library_archives
RUN for lib in `ls -I billboard-api`; do cd $lib; yarn pack --filename /library_archives/$lib.tgz; cd ..;  done

## update package.json files in all packages
WORKDIR '/build/packages'
# extract the information which libraries are needed for this package
RUN for package in `ls -I lib`;\
   do cd $package;\
   grep -o '@dm3-org/dm3-lib-[^"]*' package.json| awk -F'dm3-lib-' '{print $NF}' > required_libraries; \
   sed -i '/.*dm3-org\/dm3-lib.*/d' ./package.json; \
   jq '. + input' package.json ../../docker/resolutions.json > updated_package.json;\
   mv updated_package.json package.json; \
   cd ..; \
   done
# remove references to local libraries from package.json
# RUN 
# add resolutions to package.json in all base packages
# these resolutions are needed to make sure that the libraries are properly linked in the packages
# we will extract in the next build stage
# RUN for package in `ls -I lib`;\
#    do cd $package;\
#    jq '. + input' package.json ../../docker/resolutions.json > updated_package.json;\
#    mv updated_package.json package.json; \
#    cd ..; \
#    done
# during a further build step, the list of required libraries will be used to add these
# libraries to the project from the archives we generated above


